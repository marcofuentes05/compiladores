# Generated from YAPL.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,45,440,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,1,0,1,0,1,1,1,1,1,2,1,
        2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,
        8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,
        11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,
        16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,
        18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,
        21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,5,23,252,8,23,10,
        23,12,23,255,9,23,1,23,3,23,258,8,23,1,24,1,24,5,24,262,8,24,10,
        24,12,24,265,9,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,5,28,287,8,
        28,10,28,12,28,290,9,28,1,28,1,28,1,29,1,29,1,29,3,29,297,8,29,1,
        30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,
        34,1,34,1,34,5,34,315,8,34,10,34,12,34,318,9,34,1,34,1,34,1,34,1,
        34,1,35,1,35,1,35,1,35,1,35,5,35,329,8,35,10,35,12,35,332,9,35,1,
        35,1,35,1,35,1,35,1,35,1,35,1,35,5,35,341,8,35,10,35,12,35,344,9,
        35,1,35,1,35,3,35,348,8,35,1,35,1,35,1,36,4,36,353,8,36,11,36,12,
        36,354,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,
        42,1,43,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,
        48,1,49,4,49,383,8,49,11,49,12,49,384,1,49,1,49,1,50,1,50,1,51,1,
        51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,
        58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,
        64,1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,70,1,70,1,
        71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,2,316,342,0,76,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
        25,51,26,53,27,55,28,57,29,59,0,61,0,63,0,65,0,67,0,69,30,71,31,
        73,32,75,33,77,34,79,35,81,36,83,37,85,38,87,39,89,40,91,41,93,42,
        95,43,97,44,99,45,101,0,103,0,105,0,107,0,109,0,111,0,113,0,115,
        0,117,0,119,0,121,0,123,0,125,0,127,0,129,0,131,0,133,0,135,0,137,
        0,139,0,141,0,143,0,145,0,147,0,149,0,151,0,1,0,38,1,0,65,90,4,0,
        48,57,65,90,95,95,97,122,1,0,97,122,8,0,34,34,47,47,92,92,98,98,
        102,102,110,110,114,114,116,116,3,0,0,31,34,34,92,92,3,0,48,57,65,
        70,97,102,2,0,65,90,97,122,2,0,10,10,13,13,1,0,48,57,1,0,45,45,1,
        0,126,126,3,0,9,10,12,13,32,32,2,0,65,65,97,97,2,0,66,66,98,98,2,
        0,67,67,99,99,2,0,68,68,100,100,2,0,69,69,101,101,2,0,70,70,102,
        102,2,0,71,71,103,103,2,0,72,72,104,104,2,0,73,73,105,105,2,0,74,
        74,106,106,2,0,75,75,107,107,2,0,76,76,108,108,2,0,77,77,109,109,
        2,0,78,78,110,110,2,0,79,79,111,111,2,0,80,80,112,112,2,0,81,81,
        113,113,2,0,82,82,114,114,2,0,83,83,115,115,2,0,84,84,116,116,2,
        0,85,85,117,117,2,0,86,86,118,118,2,0,87,87,119,119,2,0,88,88,120,
        120,2,0,89,89,121,121,2,0,90,90,122,122,420,0,1,1,0,0,0,0,3,1,0,
        0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
        0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
        0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
        0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
        0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
        0,0,55,1,0,0,0,0,57,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
        0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,
        0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,
        0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,1,153,1,0,0,0,3,155,1,0,
        0,0,5,157,1,0,0,0,7,159,1,0,0,0,9,162,1,0,0,0,11,166,1,0,0,0,13,
        169,1,0,0,0,15,171,1,0,0,0,17,173,1,0,0,0,19,179,1,0,0,0,21,184,
        1,0,0,0,23,187,1,0,0,0,25,190,1,0,0,0,27,193,1,0,0,0,29,202,1,0,
        0,0,31,209,1,0,0,0,33,214,1,0,0,0,35,219,1,0,0,0,37,224,1,0,0,0,
        39,230,1,0,0,0,41,234,1,0,0,0,43,238,1,0,0,0,45,244,1,0,0,0,47,257,
        1,0,0,0,49,259,1,0,0,0,51,266,1,0,0,0,53,276,1,0,0,0,55,281,1,0,
        0,0,57,283,1,0,0,0,59,293,1,0,0,0,61,298,1,0,0,0,63,300,1,0,0,0,
        65,306,1,0,0,0,67,308,1,0,0,0,69,310,1,0,0,0,71,347,1,0,0,0,73,352,
        1,0,0,0,75,356,1,0,0,0,77,358,1,0,0,0,79,360,1,0,0,0,81,362,1,0,
        0,0,83,364,1,0,0,0,85,366,1,0,0,0,87,368,1,0,0,0,89,371,1,0,0,0,
        91,373,1,0,0,0,93,375,1,0,0,0,95,377,1,0,0,0,97,379,1,0,0,0,99,382,
        1,0,0,0,101,388,1,0,0,0,103,390,1,0,0,0,105,392,1,0,0,0,107,394,
        1,0,0,0,109,396,1,0,0,0,111,398,1,0,0,0,113,400,1,0,0,0,115,402,
        1,0,0,0,117,404,1,0,0,0,119,406,1,0,0,0,121,408,1,0,0,0,123,410,
        1,0,0,0,125,412,1,0,0,0,127,414,1,0,0,0,129,416,1,0,0,0,131,418,
        1,0,0,0,133,420,1,0,0,0,135,422,1,0,0,0,137,424,1,0,0,0,139,426,
        1,0,0,0,141,428,1,0,0,0,143,430,1,0,0,0,145,432,1,0,0,0,147,434,
        1,0,0,0,149,436,1,0,0,0,151,438,1,0,0,0,153,154,5,59,0,0,154,2,1,
        0,0,0,155,156,5,44,0,0,156,4,1,0,0,0,157,158,5,58,0,0,158,6,1,0,
        0,0,159,160,5,60,0,0,160,161,5,45,0,0,161,8,1,0,0,0,162,163,5,108,
        0,0,163,164,5,101,0,0,164,165,5,116,0,0,165,10,1,0,0,0,166,167,5,
        105,0,0,167,168,5,110,0,0,168,12,1,0,0,0,169,170,5,64,0,0,170,14,
        1,0,0,0,171,172,5,46,0,0,172,16,1,0,0,0,173,174,3,105,52,0,174,175,
        3,123,61,0,175,176,3,101,50,0,176,177,3,137,68,0,177,178,3,137,68,
        0,178,18,1,0,0,0,179,180,3,109,54,0,180,181,3,123,61,0,181,182,3,
        137,68,0,182,183,3,109,54,0,183,20,1,0,0,0,184,185,3,111,55,0,185,
        186,3,117,58,0,186,22,1,0,0,0,187,188,3,117,58,0,188,189,3,111,55,
        0,189,24,1,0,0,0,190,191,3,117,58,0,191,192,3,127,63,0,192,26,1,
        0,0,0,193,194,3,117,58,0,194,195,3,127,63,0,195,196,3,115,57,0,196,
        197,3,109,54,0,197,198,3,135,67,0,198,199,3,117,58,0,199,200,3,139,
        69,0,200,201,3,137,68,0,201,28,1,0,0,0,202,203,3,117,58,0,203,204,
        3,137,68,0,204,205,3,143,71,0,205,206,3,129,64,0,206,207,3,117,58,
        0,207,208,3,107,53,0,208,30,1,0,0,0,209,210,3,123,61,0,210,211,3,
        129,64,0,211,212,3,129,64,0,212,213,3,131,65,0,213,32,1,0,0,0,214,
        215,3,131,65,0,215,216,3,129,64,0,216,217,3,129,64,0,217,218,3,123,
        61,0,218,34,1,0,0,0,219,220,3,139,69,0,220,221,3,115,57,0,221,222,
        3,109,54,0,222,223,3,127,63,0,223,36,1,0,0,0,224,225,3,145,72,0,
        225,226,3,115,57,0,226,227,3,117,58,0,227,228,3,123,61,0,228,229,
        3,109,54,0,229,38,1,0,0,0,230,231,3,127,63,0,231,232,3,109,54,0,
        232,233,3,145,72,0,233,40,1,0,0,0,234,235,3,127,63,0,235,236,3,129,
        64,0,236,237,3,139,69,0,237,42,1,0,0,0,238,239,3,111,55,0,239,240,
        3,101,50,0,240,241,3,123,61,0,241,242,3,137,68,0,242,243,3,109,54,
        0,243,44,1,0,0,0,244,245,3,139,69,0,245,246,3,135,67,0,246,247,3,
        141,70,0,247,248,3,109,54,0,248,46,1,0,0,0,249,253,7,0,0,0,250,252,
        7,1,0,0,251,250,1,0,0,0,252,255,1,0,0,0,253,251,1,0,0,0,253,254,
        1,0,0,0,254,258,1,0,0,0,255,253,1,0,0,0,256,258,3,51,25,0,257,249,
        1,0,0,0,257,256,1,0,0,0,258,48,1,0,0,0,259,263,7,2,0,0,260,262,7,
        1,0,0,261,260,1,0,0,0,262,265,1,0,0,0,263,261,1,0,0,0,263,264,1,
        0,0,0,264,50,1,0,0,0,265,263,1,0,0,0,266,267,5,83,0,0,267,268,5,
        69,0,0,268,269,5,76,0,0,269,270,5,70,0,0,270,271,5,95,0,0,271,272,
        5,84,0,0,272,273,5,89,0,0,273,274,5,80,0,0,274,275,5,69,0,0,275,
        52,1,0,0,0,276,277,5,115,0,0,277,278,5,101,0,0,278,279,5,108,0,0,
        279,280,5,102,0,0,280,54,1,0,0,0,281,282,5,34,0,0,282,56,1,0,0,0,
        283,288,5,34,0,0,284,287,3,59,29,0,285,287,3,61,30,0,286,284,1,0,
        0,0,286,285,1,0,0,0,287,290,1,0,0,0,288,286,1,0,0,0,288,289,1,0,
        0,0,289,291,1,0,0,0,290,288,1,0,0,0,291,292,5,34,0,0,292,58,1,0,
        0,0,293,296,5,92,0,0,294,297,7,3,0,0,295,297,3,63,31,0,296,294,1,
        0,0,0,296,295,1,0,0,0,297,60,1,0,0,0,298,299,8,4,0,0,299,62,1,0,
        0,0,300,301,5,117,0,0,301,302,3,65,32,0,302,303,3,65,32,0,303,304,
        3,65,32,0,304,305,3,65,32,0,305,64,1,0,0,0,306,307,7,5,0,0,307,66,
        1,0,0,0,308,309,7,6,0,0,309,68,1,0,0,0,310,311,5,45,0,0,311,312,
        5,45,0,0,312,316,1,0,0,0,313,315,9,0,0,0,314,313,1,0,0,0,315,318,
        1,0,0,0,316,317,1,0,0,0,316,314,1,0,0,0,317,319,1,0,0,0,318,316,
        1,0,0,0,319,320,7,7,0,0,320,321,1,0,0,0,321,322,6,34,0,0,322,70,
        1,0,0,0,323,324,5,46,0,0,324,325,5,46,0,0,325,326,5,46,0,0,326,330,
        1,0,0,0,327,329,3,67,33,0,328,327,1,0,0,0,329,332,1,0,0,0,330,328,
        1,0,0,0,330,331,1,0,0,0,331,333,1,0,0,0,332,330,1,0,0,0,333,334,
        5,46,0,0,334,335,5,46,0,0,335,348,5,46,0,0,336,337,5,40,0,0,337,
        338,5,42,0,0,338,342,1,0,0,0,339,341,9,0,0,0,340,339,1,0,0,0,341,
        344,1,0,0,0,342,343,1,0,0,0,342,340,1,0,0,0,343,345,1,0,0,0,344,
        342,1,0,0,0,345,346,5,42,0,0,346,348,5,41,0,0,347,323,1,0,0,0,347,
        336,1,0,0,0,348,349,1,0,0,0,349,350,6,35,0,0,350,72,1,0,0,0,351,
        353,7,8,0,0,352,351,1,0,0,0,353,354,1,0,0,0,354,352,1,0,0,0,354,
        355,1,0,0,0,355,74,1,0,0,0,356,357,5,43,0,0,357,76,1,0,0,0,358,359,
        7,9,0,0,359,78,1,0,0,0,360,361,7,10,0,0,361,80,1,0,0,0,362,363,5,
        42,0,0,363,82,1,0,0,0,364,365,5,47,0,0,365,84,1,0,0,0,366,367,5,
        60,0,0,367,86,1,0,0,0,368,369,5,60,0,0,369,370,5,61,0,0,370,88,1,
        0,0,0,371,372,5,61,0,0,372,90,1,0,0,0,373,374,5,40,0,0,374,92,1,
        0,0,0,375,376,5,41,0,0,376,94,1,0,0,0,377,378,5,123,0,0,378,96,1,
        0,0,0,379,380,5,125,0,0,380,98,1,0,0,0,381,383,7,11,0,0,382,381,
        1,0,0,0,383,384,1,0,0,0,384,382,1,0,0,0,384,385,1,0,0,0,385,386,
        1,0,0,0,386,387,6,49,0,0,387,100,1,0,0,0,388,389,7,12,0,0,389,102,
        1,0,0,0,390,391,7,13,0,0,391,104,1,0,0,0,392,393,7,14,0,0,393,106,
        1,0,0,0,394,395,7,15,0,0,395,108,1,0,0,0,396,397,7,16,0,0,397,110,
        1,0,0,0,398,399,7,17,0,0,399,112,1,0,0,0,400,401,7,18,0,0,401,114,
        1,0,0,0,402,403,7,19,0,0,403,116,1,0,0,0,404,405,7,20,0,0,405,118,
        1,0,0,0,406,407,7,21,0,0,407,120,1,0,0,0,408,409,7,22,0,0,409,122,
        1,0,0,0,410,411,7,23,0,0,411,124,1,0,0,0,412,413,7,24,0,0,413,126,
        1,0,0,0,414,415,7,25,0,0,415,128,1,0,0,0,416,417,7,26,0,0,417,130,
        1,0,0,0,418,419,7,27,0,0,419,132,1,0,0,0,420,421,7,28,0,0,421,134,
        1,0,0,0,422,423,7,29,0,0,423,136,1,0,0,0,424,425,7,30,0,0,425,138,
        1,0,0,0,426,427,7,31,0,0,427,140,1,0,0,0,428,429,7,32,0,0,429,142,
        1,0,0,0,430,431,7,33,0,0,431,144,1,0,0,0,432,433,7,34,0,0,433,146,
        1,0,0,0,434,435,7,35,0,0,435,148,1,0,0,0,436,437,7,36,0,0,437,150,
        1,0,0,0,438,439,7,37,0,0,439,152,1,0,0,0,13,0,253,257,263,286,288,
        296,316,330,342,347,354,384,1,6,0,0
    ]

class YAPLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    CLASS = 9
    ELSE = 10
    FI = 11
    IF = 12
    IN = 13
    INHERITS = 14
    ISVOID = 15
    LOOP = 16
    POOL = 17
    THEN = 18
    WHILE = 19
    NEW = 20
    NOT = 21
    FALSE = 22
    TRUE = 23
    TYPE_ID = 24
    OBJECT_ID = 25
    SELF_TYPE = 26
    SELF = 27
    DOUBLE_QUOTE = 28
    STRING = 29
    LINE_COMMENT = 30
    BLOCK_COMMENT = 31
    INTEGER = 32
    PLUS_SIGN = 33
    MINUS_SIGN = 34
    NOT_SIGN = 35
    MULTIPLY_SIGN = 36
    DIVIDE_SIGN = 37
    LT_SIGN = 38
    LE_SIGN = 39
    EQUAL_SIGN = 40
    OPEN_PARENTHESIS = 41
    CLOSE_PARENTHESIS = 42
    OPEN_BRACKER = 43
    CLOSE_BRACKET = 44
    WS = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "','", "':'", "'<-'", "'let'", "'in'", "'@'", "'.'", 
            "'SELF_TYPE'", "'self'", "'\"'", "'+'", "'*'", "'/'", "'<'", 
            "'<='", "'='", "'('", "')'", "'{'", "'}'" ]

    symbolicNames = [ "<INVALID>",
            "CLASS", "ELSE", "FI", "IF", "IN", "INHERITS", "ISVOID", "LOOP", 
            "POOL", "THEN", "WHILE", "NEW", "NOT", "FALSE", "TRUE", "TYPE_ID", 
            "OBJECT_ID", "SELF_TYPE", "SELF", "DOUBLE_QUOTE", "STRING", 
            "LINE_COMMENT", "BLOCK_COMMENT", "INTEGER", "PLUS_SIGN", "MINUS_SIGN", 
            "NOT_SIGN", "MULTIPLY_SIGN", "DIVIDE_SIGN", "LT_SIGN", "LE_SIGN", 
            "EQUAL_SIGN", "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", "OPEN_BRACKER", 
            "CLOSE_BRACKET", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "CLASS", "ELSE", "FI", "IF", "IN", "INHERITS", 
                  "ISVOID", "LOOP", "POOL", "THEN", "WHILE", "NEW", "NOT", 
                  "FALSE", "TRUE", "TYPE_ID", "OBJECT_ID", "SELF_TYPE", 
                  "SELF", "DOUBLE_QUOTE", "STRING", "ESC", "SAFECODEPOINT", 
                  "UNICODE", "HEX", "ANY_CHARACTER", "LINE_COMMENT", "BLOCK_COMMENT", 
                  "INTEGER", "PLUS_SIGN", "MINUS_SIGN", "NOT_SIGN", "MULTIPLY_SIGN", 
                  "DIVIDE_SIGN", "LT_SIGN", "LE_SIGN", "EQUAL_SIGN", "OPEN_PARENTHESIS", 
                  "CLOSE_PARENTHESIS", "OPEN_BRACKER", "CLOSE_BRACKET", 
                  "WS", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", 
                  "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", 
                  "V", "W", "X", "Y", "Z" ]

    grammarFileName = "YAPL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


